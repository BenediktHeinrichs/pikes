@prefix rdf:       <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:      <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:       <http://www.w3.org/2002/07/owl#> .
@prefix rr:        <http://rdfpro.fbk.eu/ontologies/rules#> .
@prefix nif:       <http://persistence.uni-leipzig.org/nlp2rdf/ontologies/nif-core#> .
@prefix kem:       <http://knowledgestore.fbk.eu/ontologies/kem/core#> .
@prefix kemt:      <http://knowledgestore.fbk.eu/ontologies/kem/text#> .
@prefix itsrdf:    <http://www.w3.org/2005/11/its/rdf#> .
@prefix fbrame:    <http://framebase.org/frame/> .
@prefix fbfe:      <http://framebase.org/fe/> .
@prefix ontolex:   <http://www.w3.org/ns/lemon/ontolex#> .
@prefix pmo:       <http://premon.fbk.eu/ontology/core#> .
@prefix foaf:      <http://xmlns.com/foaf/0.1/> .
@prefix pk:        <http://pikes.fbk.eu/mappings#> .
@prefix pkrules:   <http://pikes.fbk.eu/rules#> .
@prefix :          <http://pikes.fbk.eu/rules#> .


rr: rr:prefix "rr" .
rdf: rr:prefix "rdf" .
rdfs: rr:prefix "rdfs" .
nif: rr:prefix "nif" .
kem: rr:prefix "kem" .
kemt: rr:prefix "kemt" .
itsrdf: rr:prefix "itsrdf" .
fbrame: rr:prefix "fbrame" .
fbfe: rr:prefix "fbfe" .
ontolex: rr:prefix "ontolex" .
pmo: rr:prefix "pmo" .
foaf: rr:prefix "foaf" .
pk: rr:prefix "pk" .
pkrules:  rr:prefix "pkrules" .


### INFERENCE ON KEM  ###

:cax-sco-kem a rr:Rule;
    rr:head """ ?x rdf:type ?c2 """;
    rr:body """ GRAPH sesame:nil { ?x rdf:type ?c1 }
                ?c1 rdfs:subClassOf ?c2 .
                FILTER (?c1 != ?c2) """.

:prp-spo1-kem a rr:Rule;
    rr:head """ ?x ?p2 ?y """;
    rr:body """ GRAPH sesame:nil { ?x ?p1 ?y }
                ?p1 rdfs:subPropertyOf ?p2.
                FILTER (?p1 != ?p2) """.

:prp-dom-kem a rr:Rule;
    rr:head """ ?x rdf:type ?c """;
    rr:body """ GRAPH sesame:nil { ?x ?p ?y }
                ?p rdfs:domain ?c """.

:prp-rng-kem a rr:Rule;
    rr:head """ ?y rdf:type ?c """;
    rr:body """ GRAPH sesame:nil { ?x ?p ?y }
                ?p rdfs:range ?c """.

:conveys-kem a rr:Rule;
    rr:head """ ?m kem:conveys ?g """;
    rr:body """ GRAPH sesame:nil { ?m kem:hasAnnotation/kem:substantiates ?g } """.

:is-about-kem a rr:Rule;
    rr:head """ ?m kem:isAbout ?i """;
    rr:body """ GRAPH sesame:nil { ?m kem:hasAnnotation/kem:subject ?i } """.

:involves1-kem a rr:Rule;
    rr:head """ ?a kem:involves ?i """;
    rr:body """ GRAPH sesame:nil { ?a kem:involvesSubjectOf/kem:subject ?i } """.

:involves2-kem a rr:Rule;
    rr:head """ ?a kem:involves ?i """;
    rr:body """ GRAPH sesame:nil { ?a kem:involvesReferentOf/kem:refersTo ?i } """.


### INFERENCE ON INSTANCES ###

#:test a rr:Rule;
#    rr:head """ kem:Instance rdfs:subClassOf kem:Thing.
#                rdfs:seeAlso rdfs:subPropertyOf kem:seeAlso.
#                rdfs:seeAlso rdfs:domain kem:KEMStuff.
#                rdfs:seeAlso rdfs:range kem:DBpediaStuff. """ .

:cax-sco-instances a rr:Rule;
    rr:head """ ?am ?amp ?go. GRAPH ?go { ?x rdf:type ?c2 } """;
    rr:body """ ?gi a kem:Graph. GRAPH ?gi { ?x rdf:type ?c1 }
                ?c1 rdfs:subClassOf ?c2. FILTER (?c1 != ?c2)
                BIND (rr:sid(?x, rdf:type, ?c2) AS ?go)
                OPTIONAL { ?am ?amp ?gi } """.
                
:prp-spo1-instances a rr:Rule;
    rr:head """ ?am ?amp ?go. GRAPH ?go { ?x ?p2 ?y } """;
    rr:body """ ?gi a kem:Graph. GRAPH ?gi { ?x ?p1 ?y }
                ?p1 rdfs:subPropertyOf ?p2. FILTER (?p1 != ?p2)
                BIND (rr:sid(?x, ?p2, ?y) AS ?go)
                OPTIONAL { ?am ?amp ?gi } """.

:prp-dom-kem-instances a rr:Rule;
    rr:head """ ?am ?amp ?go. GRAPH ?go { ?x rdf:type ?c } """;
    rr:body """ ?gi a kem:Graph. GRAPH ?gi { ?x ?p ?y }
                ?p rdfs:domain ?c
                BIND (rr:sid(?x, rdf:type, ?c) AS ?go)
                OPTIONAL { ?am ?amp ?gi } """.

:prp-rng-kem-instances a rr:Rule;
    rr:head """ ?am ?amp ?go. GRAPH ?go { ?y rdf:type ?c } """;
    rr:body """ ?gi a kem:Graph. GRAPH ?gi { ?x ?p ?y }
                ?p rdfs:range ?c
                BIND (rr:sid(?y, rdf:type, ?c) AS ?go)
                OPTIONAL { ?am ?amp ?gi } """.


### ATTRIBUTES (TODO) ###

# :attributes a rr:Rule;
#     rr:head """ GRAPH ?g { ?e a ks:Attribute }
#                 ?m ks:expresses ?g ; ks:denotes ?e """;
#     rr:body """ ?m a ks:AttributeMention ; nif:anchorOf ?a ; ks:headModifiersSynsetID ?e .
#                  BIND (uuid() as ?g) """.


### INSTANCE CREATION ###

#revised with new kem/kemt UD
:instance-creation-base a rr:Rule;
    rr:head """ ?a kem:subject ?i; kem:substantiates ?g. ?m kem:refersTo ?i .
                GRAPH ?g { ?i a kem:Instance } .
                ?g prov:wasAttributedTo pkrules:instance-creation-base .""";
    rr:body """ ?m a kem:Mention; nif:anchorOf ?s; kem:hasAnnotation ?a.
                ?a a kemt:EntityAnnotation.
                FILTER NOT EXISTS { ?a a kemt:Predicate; itsrdf:taClassRef [ a pk:ArgumentNominalization ] }
                BIND (rr:mint(?s, ?m) AS ?i)
                BIND (rr:sid(?i,rdf:type,kem:Instance) AS ?g) """.

#TODO revised with new kem/kemt UD - SSID
:instance-creation-argument-nominalization a rr:Rule;
    rr:head """ ?a kem:subject ?if; kem:involves ?i; kem:substantiates ?g1,?g2,?g3. ?m kem:refersTo ?i; kem:isAbout ?if.
                GRAPH ?g1 { ?i  a kem:Instance . }
                GRAPH ?g2 { ?if a kem:Instance . }
                GRAPH ?g3 { ?if a fbrame:Top_frame . }
                ?g1 prov:wasAttributedTo pkrules:instance-creation-argument-nominalization .
                ?g2 prov:wasAttributedTo pkrules:instance-creation-argument-nominalization .
                ?g3 prov:wasAttributedTo pkrules:instance-creation-argument-nominalization . """;
    rr:body """ ?m a kem:Mention; nif:anchorOf ?s; kem:hasAnnotation ?a.
                ?a a kemt:Predicate; itsrdf:taClassRef [ a pk:ArgumentNominalization ] 
                BIND (rr:mint(concat(?s, "_pred"), ?m) AS ?if)
                BIND (rr:mint(?s, ?m) AS ?i)
                BIND (rr:sid(?i,rdf:type,kem:Instance) AS ?g1)
                BIND (rr:sid(?if,rdf:type,kem:Instance) AS ?g2)
                BIND (rr:sid(?if,rdf:type,fbrame:Top_frame) AS ?g3) """.


### TYPING ###

#revised with new kem/kemt UD
# maps semantic classes, synsets and NERC classes to type triples (sense annotations on mentions affect only the referent 
:typing-base a rr:Rule;
    rr:head """ ?a kem:substantiates ?g. GRAPH ?g { ?i a ?t }
                ?g prov:wasAttributedTo pkrules:typing-base . """;
    rr:body """ ?m a kem:Mention; kem:hasAnnotation ?a.
                ?a a kemt:EntityAnnotation; kem:subject ?i.
                { ?m kem:refersTo ?i. ?a itsrdf:termInfoRef ?c. ?c ontolex:isConceptOf|ontolex:reference ?t } UNION
                { ?a itsrdf:taClassRef ?c. ?c pmo:ontologyMatch ?t }
                BIND (rr:sid(?i,rdf:type,?t) AS ?g) """.


### NAMING ###

#revised with new kem/kemt UD
:naming-proper-names a rr:Rule;
    rr:head """ ?a kem:substantiates ?g. GRAPH ?g { ?i foaf:name ?s }
                ?g prov:wasAttributedTo pkrules:naming-proper-names . """;
    rr:body """ ?a a kemt:NamedEntity; kem:subject ?i; kemt:properName ?s.
                BIND (rr:sid(?i,foaf:name,?s) AS ?g) """.

#revised with new kem/kemt UD
:naming-other-names a rr:Rule;
    rr:head """ ?a kem:substantiates ?g. GRAPH ?g { ?i rdfs:label ?s }
                ?g prov:wasAttributedTo pkrules:naming-other-names . """;
    rr:body """ ?m a kem:Mention; nif:anchorOf ?s; kem:refersTo ?i; kem:hasAnnotation ?a.
                ?a kem:subject ?i.
                BIND (rr:sid(?i,rdfs:label,?s) AS ?g) """.


### LINKING ###

#TODO
:linking-tern a rr:Rule;
    rr:head """ ?a kem:substantiates ?g. GRAPH ?g { ?i owl:sameAs ?v }
                ?g prov:wasAttributedTo pkrules:linking-tern . """;
    rr:body """ ?a a kemt:Timex3; kemt:value ?v ; kemt:subject ?i.
                BIND (rr:sid(?i,owl:sameAs,?v) AS ?g) """.

#revised with new kem/kemt UD
:linking-nel a rr:Rule;
    rr:head """ ?a kem:substantiates ?g. GRAPH ?g { ?i ?p ?u }
                ?g prov:wasAttributedTo pkrules:linking-nel . """;
    rr:body """ ?a a kemt:EntityAnnotation; kem:subject ?i; itsrdf:taIdentRef ?u.
                BIND (EXISTS { ?a ^kem:hasAnnotation/kem:hasAnnotation [ a kemt:NamedEntity ] } AS ?n)
                BIND (IF(?n, owl:sameAs, rdfs:seeAlso) AS ?p)
                BIND (rr:sid(?i,?p,?u) AS ?g) """.


### PARTICIPATION ###

#revised with new kem/kemt UD
# maps semantic roles to participation triples
:participation-adv a rr:Rule;
    rr:head """ ?a kem:substantiates ?g. GRAPH ?g { ?if ?p ?ia }
                ?g prov:wasAttributedTo pkrules:participation-adv . """;
    rr:body """ ?a a kemt:Participation; kemt:predicate ?ap; kemt:argument ?aa.
                ?ap kem:subject ?if. ?aa kem:subject ?ia.
                OPTIONAL {?aa itsrdf:taPropRef [ pmo:ontologyMatch ?pm ] . }
                BIND(COALESCE(?pm,fbfe:Top_frame.has_element) as ?p)
		        BIND (rr:sid(?if,?p,?ia) AS ?g) """.


### COREFERENCE ###

#revised with new kem/kemt UD TODO not tested
:coreference-base a rr:Rule;
    rr:head """ ?a kem:substantiates ?g. GRAPH ?g { ?i1 owl:sameAs ?i2 }
                ?g prov:wasAttributedTo pkrules:coreference-base . """;
    rr:body """ ?a a kemt:Coreference; kemt:coreferring ?a1, ?a2.
                ?a1 kem:subject ?i1. ?a2 kem:subject ?i2.
                FILTER (?i1 != ?i2)
                BIND (rr:sid(?i1,owl:sameAs,?i2) AS ?g) """.

#:coreference-copular-verbs a rr:Rule;
#    rr:head """ ?a kem:substantiates ?g. GRAPH ?g { ?i1 owl:sameas ?i2 } """;
#    rr:body """ [] a kemt:PredicateArgumentStructure; kemt:argument ?aa1, ?aa2.
#                ?aa1 itsrdf:taPropRef ?r1; kem:subject ?i1.
#                ?aa2 itsrdf:taPropRef ?r2; kem:subject ?i2.
#                [] a pk:CopularVerb; pk:subjectRole ?r1; pk:complementRole ?r2.
#                FILTER EXISTS { ?aa2 ^nif:annotation/nif:annotation [ a kemt:Predicate; itsrdf:taClassRef [ a pk:ArgumentNominalization ] ] }
#                BIND (rr:mint(?a) AS ?g) """.


### COORDINATION ###

#revised with new kem/kemt UD
:coordination a rr:Rule;
    rr:head """ ?a kem:substantiates ?g. GRAPH ?g { ?ig pk:includes ?im }
                ?g prov:wasAttributedTo pkrules:coordination . """;
    rr:body """ ?a a kemt:Coordination; kemt:group [ kem:subject ?ig ]; kemt:conjunct [ kem:subject ?im ].
                BIND (rr:sid(?ig,pk:includes,?im) AS ?g) """.


### POST PROCESSING ###


# pk:include, link annotations of group instance to member instances
:post-processing-include a rr:Rule;
    rr:head """ ?a kem:subjectInvolves ?i """;
    rr:body """ ?a kem:subject/pk:includes ?i  . """.

# pk:include, group instance is object
:post-processing-include-object a rr:Rule;
    rr:head """ ?a1 kem:substantiates ?g. ?a2 kem:substantiates ?g. GRAPH ?g { ?i ?p ?im } .
                ?g prov:wasAttributedTo pkrules:post-processing-include-object . """;
    rr:body """ ?a1 kem:substantiates ?g1. GRAPH ?g1 { ?i ?p ?ig }
                ?a2 kem:substantiates ?g2. GRAPH ?g2 { ?ig pk:includes ?im }
                BIND (rr:sid(?i,?p,?im) as ?g) """.

# pk:include, group instance is subject
:post-processing-include-subject a rr:Rule;
    rr:head """ ?a1 kem:substantiates ?g1. ?a2 kem:substantiates ?g. GRAPH ?g { ?im ?p ?i }
                ?g prov:wasAttributedTo pkrules:post-processing-include-subject . """;
    rr:body """ ?a1 kem:substantiates ?g1. GRAPH ?g1 { ?ig ?p ?i FILTER (?p != pk:includes) FILTER (?p != rdfs:label)}
                ?a2 kem:substantiates ?g2. GRAPH ?g2 { ?ig pk:includes ?im }
                BIND (rr:sid(?im,?p,?i) as ?g) """.
